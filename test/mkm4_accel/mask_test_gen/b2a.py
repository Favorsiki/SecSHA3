def psi(x, r, len):
    tmp1 = x^r
    tmp2 = tmp1 - r
    ans = 0
    if tmp2 < 0:
        ans = tmp2 + 2**len
    else :
        ans = tmp2
    return ans % (2**len)

def Goubin(x1, x2, s, r, len):
    a1 = x1 ^ s
    a2 = x2 ^ s
    u = a1 ^ psi(a1, r^a2, len)
    A1 = u ^ psi(a1, r, len)
    A2 = a2
    return A1, A2


def B2A_q(B0, B1, I_r0, I_r1, I_r2, I_r3):
    x0, x1 = Goubin(B0, B1, I_r0, I_r1, 12)
    y0_without = (x0*33556320) >> 24
    y1_without = (x1*10080*3329) >> 24
    y0 = y0_without % 6658
    y1 = y1_without % 6658
    y0 = y0 + 1
    
    b0 = y0 % 2
    b1 = y1 % 2
    a0, a1 = Goubin(b0, b1, I_r2, I_r3, 1)
    z0 = (y0 - a0) % 6658
    z1 = (y1 - a1) % 6658
    c0 = (z0 - z0%2) % 6658
    c1 = (z1 - z0%2) % 6658
    A0 = (c0 >> 1) % (2**12)
    A1 = (c1 >> 1) % (2**12)
    return A0, A1

# B0 = 0x1a7
# B1 = 0x50e
# I_r0 = 0xa01
# I_r1 = 0x39a
# I_r2 = 0
# I_r3 = 1
# A0, A1 = B2A_q(B0, B1, I_r0, I_r1, I_r2, I_r3)
# print(B0^B1, B0, B1)
# print(A0+A1, A0, A1)
# print()

# B0 = 0x3a7
# B1 = 0x5fe
# I_r0 = 0x201
# I_r1 = 0x32a
# I_r2 = 1
# I_r3 = 1
# A0, A1 = B2A_q(B0, B1, I_r0, I_r1, I_r2, I_r3)
# print(B0^B1, B0, B1)
# print(A0+A1, A0, A1)
# print()

# B0 = 0x15a
# B1 = 0x55e
# I_r0 = 0xb71
# I_r1 = 0x31a
# I_r2 = 0
# I_r3 = 0
# A0, A1 = B2A_q(B0, B1, I_r0, I_r1, I_r2, I_r3)
# print(B0^B1, B0, B1)
# print(A0+A1, A0, A1)
# print()
import random

ek = "FB02B785031E09868392014F277872D5B60A6123AC293968AD6713428C4B07B7BBCD375E50058263CB02B159137B5634C9462DC506606A565BA01482353506D1A53EAEB37BBB29C5A867CF2A39448DFB93B9F32DB9BCA96316169A28312176739B148FBE0208C1935C7C346A75FA0621903E9E755A190AA90EF195C6B3606E002EACBC93C6D5798C7A7FD11A6EE4CC9A86C889E83B5C44361E955BC8DD6A4171AA8423A3BF76C79682D610EA9A4E9F1C19AD646EA7688D093BCBB98080507597BF80C78CAA75E8E339235904DB388702BBB782502A6613581EC87CD1653A7B3805F5C6963E17282C3B12B9C87612F754FE6081704B906D276957A83CC670C0676C9489F4625E0750E9338C09055C1BAC74EF2414DC23B47C60CCAA600977AB369789AB772A1D3EC16301853B4938A23C60AA5899253AC84E4D597B9FAC99EECB384399544758A6A485442873558CAB5133499ED1C46205516B92E691149514A67C2CC7D10202B1B3B421C167B7743677B83F13562F638B251B29B15C5DC735064778C67B1A0C687B112A707B1F039676200605E3A0FFD6223C8B397EC81CA9CB56D20042F153BF4C213035FB4D3A34730DC55379614C681CA81FF2A0AF76B1421319DDD9C888A10D6C4B35D67622D8C85C0EA74C3BE207D6996D901AC55DD99CCB7B4769B0BFCFE84A14F5628718C056E73FCEAC23DFD96D5ED42F16205A0EE334A0CB8AA32494CB64CF85AB88ED036F555392A9A195B4C76BFBC393F24BBC2AB5744C0063184667A586A06F82A35442123472A1B6B170D46A97999C2A0DD28D13B5BD25871CC050CD101126D0862D0A0CBF1D610534797627219E5B3690D47B7C9A117E8C53753290B9BB196BD44B989B53C0FD756C846AACE44B4CD42A3BCF3498E6C54EAD6374532208189569B4009F27AAA67CD9641B1828A54C7A9E5C633439C5860B67B05B9B81FC4FDDB58B5C603B95EC61B520CF6417544EF5357BE10CC6812F3A60667CBB5C89A6680F740FA2FA1F94B719AF11B3528392438C2B1D1304A98905E06A3EFE042671531954E43F213287D7833FC8ECBF4D8986DD8048588DC41A427B208F817C4CE104816450D6A4579FC9C1E0D38AB69B997D5F8BDE"
dk = "E4B86E230A87187B9378C427D8055357BB98D750305E969C91C36693E4AD62498DA3D3BA08A2A1BA0085AE8A3E49185A658A323C55A051979DBF847DFB4315F03C3EB704154D6B512B357F65F9BBFCD12ED8C60D4DE558CC9B8F363A714C47ADBAF7B0658BC01C62A56339C7DEA27B0F903A3D3B8104D7BEC0A5588D77A0AAD42543621B97512451503CC9939D46B6A93B4570DF368B6B82895DFBB18A964D6C44BD5A91CB51AC141F6AAD33D34EBCF15772250C0EBA0B7E44539A436320E02DE6D38D8D48557CE9173231637C081CB965B80067732EF99DD0719E3211323D31A88C96CAF943BD11B89DFC683E184A383CBC6AE69A6CFD007BAA7923B0D2B875048A9F693D20EA66D7B758C0F697AA537113CA5E38208880697EDBF5BAA4A8381BE128B4E27489D046BD789CA734121A2BCD58BC8971341DCAA76DD028BF2A1513A45888FF0721EAD073CB33398393AFBF2552D544AB55633EB92B164B291BFC514ED589708E4308929B96744061D98A0B5C5755C90308A25B95005119A6C1CFDC770517D52E5DB36C1145AF953BBF21D982993291A4573311FA65BFBCA046488A46D87972263B0CC97EE95AC23BC821987C5F10B4ACDC7C71AECB41D8341BFD31756B333DE2211C49838341A989475A897B229F132C62E05140FFE0BDC4EB0F4FA40FE2D577D69577C4A3A323AA142D62942F031A19F2ABA7B9ADC1665FAD00775DE17295B06BE4904F618625305A3DCF37CFBA93A6A73591F36ABB4964429727A2A007280B5188432AA6EE814C16E689F709091F7C3E72487EA07114DAC17972AC4B5A3B7BAD54171B770583890809673A2EF120FD3BBAA03649909030C60BB2CDE47E96E894BCD171E00109D43C5E2BC13CB0CCCFBB56740DC8BCD2B2A16C397416E1229F508D6C7C358C7847154ABC3573C992035485882B6E52B549E55A2C9900B7DC51776007450699083965C5719DAD4395FEC19BA41C42CAE434C4F899F4B8AF4795CD12FBBD688B4E56E33D23BCB4B2351893067CB21497483181CE0868D4B953E626872C2AA368FAC1AC394DD1A95095698FA70CC26C5B9893D090FB02B785031E09868392014F277872D5B60A6123AC293968AD6713428C4B07B7BBCD375E50058263CB02B159137B5634C9462DC506606A565BA01482353506D1A53EAEB37BBB29C5A867CF2A39448DFB93B9F32DB9BCA96316169A28312176739B148FBE0208C1935C7C346A75FA0621903E9E755A190AA90EF195C6B3606E002EACBC93C6D5798C7A7FD11A6EE4CC9A86C889E83B5C44361E955BC8DD6A4171AA8423A3BF76C79682D610EA9A4E9F1C19AD646EA7688D093BCBB98080507597BF80C78CAA75E8E339235904DB388702BBB782502A6613581EC87CD1653A7B3805F5C6963E17282C3B12B9C87612F754FE6081704B906D276957A83CC670C0676C9489F4625E0750E9338C09055C1BAC74EF2414DC23B47C60CCAA600977AB369789AB772A1D3EC16301853B4938A23C60AA5899253AC84E4D597B9FAC99EECB384399544758A6A485442873558CAB5133499ED1C46205516B92E691149514A67C2CC7D10202B1B3B421C167B7743677B83F13562F638B251B29B15C5DC735064778C67B1A0C687B112A707B1F039676200605E3A0FFD6223C8B397EC81CA9CB56D20042F153BF4C213035FB4D3A34730DC55379614C681CA81FF2A0AF76B1421319DDD9C888A10D6C4B35D67622D8C85C0EA74C3BE207D6996D901AC55DD99CCB7B4769B0BFCFE84A14F5628718C056E73FCEAC23DFD96D5ED42F16205A0EE334A0CB8AA32494CB64CF85AB88ED036F555392A9A195B4C76BFBC393F24BBC2AB5744C0063184667A586A06F82A35442123472A1B6B170D46A97999C2A0DD28D13B5BD25871CC050CD101126D0862D0A0CBF1D610534797627219E5B3690D47B7C9A117E8C53753290B9BB196BD44B989B53C0FD756C846AACE44B4CD42A3BCF3498E6C54EAD6374532208189569B4009F27AAA67CD9641B1828A54C7A9E5C633439C5860B67B05B9B81FC4FDDB58B5C603B95EC61B520CF6417544EF5357BE10CC6812F3A60667CBB5C89A6680F740FA2FA1F94B719AF11B3528392438C2B1D1304A98905E06A3EFE042671531954E43F213287D7833FC8ECBF4D8986DD8048588DC41A427B208F817C4CE104816450D6A4579FC9C1E0D38AB69B997D5F8BDE0ADE8A731D93408B0C9E2338562CF3D7F287CBA788F33130AA0A60BB93FB25DA826750CE3611006B9909EC6C14F7B547F463A71675AB8105319764FF1BFE0D9F"
m = "D5A01921C0003CB075549B044ECE1EF3BEE9BB1783591503FB664A4B64E3B8CE"
c
K_enc = "30F7CC0F68EF2EC35C87DE660693C80FA6F4056FCD44A4344025075F5B3AD407"
K_dec = "23988479B96BC13628D1500B0ACA4D4A84E71386F7C00F2830B026A240078695"
K_final = "30F7CC0F68EF2EC35C87DE660693C80FA6F4056FCD44A4344025075F5B3AD407"

def enc_testbench(ek, m, c, K):
    enc_din = "KYBER512_ENC_DIN.txt"
    enc_dout = "KYBER512_ENC_DOUT.txt"

    m_list = []
    file1 = open(enc_din, "w")
    for i in range(0,1600,8):
        file1.write(ek[i:i+8]+"\n")
    for i in range(0,64,8):
        m_list.append(int(m[i:i+8],16))
    # file1.write("-------------\n")
    for i in range(8):
        rand = random.getrandbits(32)
        file1.write(hex(rand^m_list[i])[2:].upper()+"\n")
        m_list[i] = rand
    for item in m_list:
        file1.write(hex(item)[2:].upper()+"\n")
    file1.close()

    file2 = open(enc_dout, "w")
    for i in range(0,1536,8):
        file2.write(c[i:i+8]+"\n")
    for i in range(0,64,8):
        file2.write(K[i:i+8]+"\n")
    file2.close()

def dec_testbench(dk, c, K_):
    dec_din = "KYBER512_DEC_DIN.txt"
    dec_dout = "KYBER512_DEC_DOUT.txt"
    file1 = open(dec_din, "w")
    # share0. din_s0 = data ^ 9
    for i in range(0,3264,8):
        file1.write(dk[i:i+8]+"\n")
    # share1. din_s1 = 0
    for i in range(0,3264,8):
        file1.write("00000000\n")
    # public input ciphertext 'c'.
    for i in range(0,1536,8):
        file1.write(c[i:i+8]+"\n")
    file1.close()

    file2 = open(dec_dout, "w")
    for i in range(0,64,8):
        file2.write(K_final[i:i+8]+"\n")
    file2.close()
    
enc_testbench(ek,m,c,K_enc)
dec_testbench(dk, c, K_dec)

ntt = [-2,0,-2,-2,1,0,-2,1,-1,0,1,0,1,-1,0,-3,0,3,-1,0,0,2,0,0,1,-1,0,2,-1,1,1,2,-1,2,1,2,0,1,0,-2,0,1,0,1,-2,0,1,-1,1,0,0,-1,0,0,-1,0,2,-1,0,1,-1,-1,0,1,0,1,0,-1,0,0,-1,-1,0,0,-1,-2,-1,0,1,1,0,-1,2,-1,1,0,1,1,1,2,1,2,2,0,1,0,-1,-1,0,0,0,-1,-2,0,-1,1,0,-1,-1,1,-1,1,1,1,1,0,-1,0,-1,1,1,1,2,1,-1,-1,-2,-1,1,2,-1,0,3,0,0,1,0,1,-1,-2,-3,0,-1,0,0,1,0,0,-2,0,1,-2,2,2,-1,1,-2,1,0,1,1,1,1,1,1,-2,2,-1,1,1,0,-1,-2,0,0,-2,-1,0,0,0,-2,0,0,-1,1,0,-2,0,-3,3,-1,1,1,0,0,2,-1,1,2,-1,-1,0,1,1,0,3,0,0,-1,0,0,-2,-2,-1,-2,2,-1,0,-1,2,-1,2,0,0,1,0,1,-1,0,2,2,-1,2,1,-2,0,0,1,-1,2,-2,2,1,-1,1,2,1,1,2,-1,0,-2,2,2,-1,-1]
    
def ntt_testbench(input):
    ntt_din0 = []
    ntt_din1 = []
    for item in input :
        rand = random.getrandbits(12)
        rand = rand & 0x7ff
        ntt_din0.append((rand+item)%3329)
        ntt_din1.append(3329-rand)
    
    file = open("ntt_din0.txt", "w")
    for i in range(0,256,2):
        data = (ntt_din0[i+1]<<12)+ntt_din0[i]
        data_str = hex(data).upper()[2:]
        file.write(data_str+'\n')
    file.close()
    file = open("ntt_din1.txt", "w")
    for i in range(0,256,2):
        data = (ntt_din1[i+1]<<12)+ntt_din1[i]
        data_str = hex(data).upper()[2:]
        file.write(data_str+'\n')
    file.close()
        
# ntt_testbench(ntt)
